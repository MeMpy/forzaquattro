package connectFour;

import java.util.Calendar;
import java.util.Observer;

/**
 * Controller.java
 *
 * File generated from the ConnectFour::Controller uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 23/04/10 15.19.33 (23 aprile 2010) $

 * COSE DA FARE
 * 1 - istanziare AlphaBetaPlayer
 * 2 - aggiustare il "pezzotto" per la conversione Long => Integer
 * 3 - aggiustare il nome della classe GameStats e dell'attributo actualGameStats
 * 4 - togliere le stampe
 *
/**
 * Description of the class Controller.
 *
 */
public class Controller implements ControllerInterface {
    private GameState actualGameState;
    private GameStats actualGameStats;
    private AIPlayerInterface yellowPlayer;
    private AIPlayerInterface redPlayer;

		
    /**
     * Constructor.
     */
    public Controller() {
    }

    public static void main(String[] args){
//        GameState gs=new GameState(4, 4);
//        AIPlayerInterface player=new MinMaxPlayer(1,1);
//
//        //MinMaxPlayer player=new MinMaxPlayer(1);
//
//        GameState newstate=player.nextMove(gs);
//        if (newstate!=null){
//            System.out.println("\nVECCHIO STATO");
//            gs.stampa();
//            System.out.println("\nNUOVO STATO");
//            newstate.stampa();
//        }else{
//            System.out.println("c'è stato un problema...");
//        }
        ControllerInterface c = new Controller();
        c.initGame(ControllerInterface.miniMax, 4, ControllerInterface.human, 0,null);
        c.calculateAIMove(ControllerInterface.yellow);
    }

    /**
     * Inizializza la partita.
     * @param yellowPlayer String che rappresenta il tipo del giocatore giallo.
     * La stringa passata deve assumere un valore tra quelli definiti nelle costanti
     * dell'interfaccia ControllerInterface miniMax, alphaBeta e human
     * @param yellowLevel Integer compreso tra 1 e 10 che rappresenta il livello
     * del giocatore giallo. Se il giocatore è human tale valore non è preso in
     * considerazione
     * @param redPlayer String che rappresenta il tipo del giocatore rosso.
     * La stringa passata deve assumere un valore tra quelli definiti nelle costanti
     * dell'interfaccia ControllerInterface miniMax, alphaBeta e human
     * @param redLevel Integer compreso tra 1 e 10 che rappresenta il livello
     * del giocatore rosso. Se il giocatore è human tale valore non è preso in
     * considerazione
     * @param stats è l'observer sulle statistiche del gioco
     * @return true se l'inizializzazione ha successo; false se c'è stato un problema.
     */
    public Boolean initGame(String yellowPlayer, Integer yellowLevel, String redPlayer, Integer redLevel, Observer stats) {
        this.actualGameState=new GameState(8, 7);
        this.actualGameStats=new GameStats();
        this.actualGameStats.addObserver(stats);
        if(yellowPlayer.equals(ControllerInterface.miniMax))
            this.yellowPlayer=new MinMaxPlayer(ControllerInterface.yellow, yellowLevel);
        else if(yellowPlayer.equals(ControllerInterface.alphaBeta))
            System.out.println("Istanziare AlphaBetaPlayer");
//            this.yellowPlayer=new AlphaBetaPlayer(ControllerInterface.yellow, yellowLevel);

        if(redPlayer.equals(ControllerInterface.miniMax))
            this.redPlayer=new MinMaxPlayer(ControllerInterface.red, redLevel);
        else if(redPlayer.equals(ControllerInterface.alphaBeta))
            System.out.println("Istanziare AlphaBetaPlayer");
//            this.redPlayer=new AlphaBetaPlayer(ControllerInterface.red, redLevel);
        return true;
    }

    /**
     * invia la mossa effettuata dall'essere umano
     * @param move Integer che rappresenta la mossa effettuata
     * @param player Integer che rappresenta il colore del giocatore. Il parametro
     * passato deve assumere un valore tra ControllerInterface.yellow e
     * ControllerInterface.red
     * @return
     */
    public GameState sendHumanMove(Integer move, Integer player) {
        if((move<0) || (move>=this.actualGameState.getColumns()))
            System.out.println("MOSSA NON VALIDA");
        else{
            this.actualGameState.doMove(player, move);
        }
        //aggiunte da Ross
        actualGameStats.setEndGame(actualGameState.isTerminal());
        
        return this.actualGameState;
    }

    /**
     * Attiva il calcolo della prossima mossa che deve effettuare l' AI
     * @param player Integer che rappresenta il colore del giocatore. Il parametro
     * passato deve assumere un valore tra ControllerInterface.yellow e
     * ControllerInterface.red
     * @return lo stato nuovo
     */
    public GameState calculateAIMove(Integer player) {
        GameState newGameState = null;
        Long initTime = new Long(0);
        Long finishTime = new Long(0);
        long calcTime; //USARE LA FUNZIONE intValue()
        if((player.equals(ControllerInterface.yellow))&&(yellowPlayer!=null)){
            initTime = Calendar.getInstance().getTimeInMillis();
            newGameState = yellowPlayer.nextMove(this.actualGameState);
            finishTime = Calendar.getInstance().getTimeInMillis();
            this.actualGameStats.setYellowLastExaminatedNodeNumber(yellowPlayer.getExaminatedNodeNumber());
            calcTime = finishTime - initTime;
            this.actualGameStats.setYellowLastTime((int) calcTime);
        }
        else if((player.equals(ControllerInterface.red))&&(redPlayer!=null)){
            initTime = Calendar.getInstance().getTimeInMillis();
            newGameState = redPlayer.nextMove(this.actualGameState);
            finishTime = Calendar.getInstance().getTimeInMillis();
            this.actualGameStats.setRedLastExaminatedNodeNumber(redPlayer.getExaminatedNodeNumber());
            calcTime = finishTime - initTime;
            this.actualGameStats.setRedLastTime((int) calcTime);

        }
        System.out.println(finishTime-initTime);
        this.actualGameState=newGameState;
        //aggiunti da Ross
        actualGameStats.setEndGame(actualGameState.isTerminal());
        
        return newGameState;
    }

    
}